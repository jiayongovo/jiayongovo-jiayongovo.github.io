<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/06/17/windows%20rust%20%E5%AE%89%E8%A3%85/"/>
    <url>/2024/06/17/windows%20rust%20%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="Windows下Rust环境安装"><a href="#Windows下Rust环境安装" class="headerlink" title="Windows下Rust环境安装"></a>Windows下Rust环境安装</h2><p>本文档的本意是不希望安装Visual Studio ，这个软件几个G的空间太大了…</p><ul><li>首先安装C&#x2F;C++ 环境，这里我们选择MinGW64，MinGW64（Minimalist GNU for Windows 64-bit）是一个在 Windows 操作系统上提供 GNU 工具集的开发环境。它旨在为 Windows 提供一套类Unix的开发工具，包括编译器、链接器、库和其他一些工具，使开发者能够在 Windows 平台上进行类Unix的软件开发。<ul><li>在 <a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/">sourceforg</a>托管网站上往下翻，找到想要版本的下载，博主系统是win 10 64位机器，选择的是x86_64-win32-seh 以供参考</li><li>解压到想要的目录下后，将下载路径的bin目录添加到环境变量即可，如D:\minGW-64\mingw64\bin</li></ul></li><li>之后去<a href="https://www.rust-lang.org/learn/get-started">Rust官网</a>下载Rustup，安装Rust即可</li><li>再然后安装Rust，由于我们没有Visual Studio，因此选择2)，继续安装即可。</li><li>安装完Rust，在编译时可能会发现错误，<code>error: linker link.exe not found</code>，这里我们首先先换源：<ul><li>找到cargo的配置目录。Windows一般在C:\Users{用户名}.cargo，</li><li>在目录下新建config文件，将下面内容保存为UTF8格式<ul><li><pre><code class="txt"> [source.crates-io] registry = &quot;https://github.com/rust-lang/crates.io-index&quot; # 指定镜像 replace-with = &#39;tuna&#39; # 清华大学 [source.tuna] registry = &quot;https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git&quot; # 中国科学技术大学 [source.ustc] registry = &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot; # 上海交通大学 [source.sjtu] registry = &quot;https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index&quot; # rustcc社区 [source.rustcc] registry = &quot;https://code.aliyun.com/rustcc/crates.io-index.git&quot; # 字节跳动 [source.rsproxy] registry = &quot;https://rsproxy.cn/crates.io-index&quot;</code></pre></li><li>然后在终端键入这两条命令即可<ul><li><code>rustup toolchain install stable-x86_64-pc-windows-gnu</code></li><li><code>rustup default stable-x86_64-pc-windows-gnu</code></li></ul></li></ul></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/06/17/verilog_with_vs/"/>
    <url>/2024/06/17/verilog_with_vs/</url>
    
    <content type="html"><![CDATA[<h3 id="Vivado-with-Vscode"><a href="#Vivado-with-Vscode" class="headerlink" title="Vivado with Vscode"></a>Vivado with Vscode</h3><p>目的:希望使用Vscode开发Verilog，优化编程体验</p><ul><li>更换Vivado自带文本编辑器<br>打开Vivado Tools&#x2F;Settings&#x2F;Text Editor&#x2F;Current Editor&#x2F;Custom Editor&#x2F;,修改Editor为[Vscode.exe path]-g [file name]:[line number]</li><li>Vscode安装Verilog拓展，支持语法高亮、自动补全、列出端口<br>在拓展商店中搜索 Verilog-HDL&#x2F;SystemVerilog</li><li>实现自动语法纠错</li></ul><ol><li>首先将Vivado&#x2F;bin目录放到环境变量中，Vscode可方便的调用xvlog(Vivado自带的语法纠错工具)</li><li>之后找到上面下载的拓展设置，将Verilog的Linter设置为xvlog</li></ol><ul><li>自动生成Testbench<br>在拓展上商店中搜索Verilog_Testbench插件，同时使用pip install chardet 命令，该插件需要该py包<br>优化:</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/06/17/shell%E7%BC%96%E7%A8%8B/"/>
    <url>/2024/06/17/shell%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="shell编程"><a href="#shell编程" class="headerlink" title="shell编程"></a>shell编程</h3><p>目的: 在开发过程不可避免需要使用shell脚本完成工作，特此写一篇笔记用于学习和使用。<a href="https://github.com/qinjx/30min_guides/blob/master/shell.md">参考文献_Shell脚本三十分钟入门</a></p><h4 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h4><p>文件第一行为 <code>#!/bin/bash</code>，告诉系统这个脚本需要什么解释器执行<br>运行方法：</p><ol><li><code>chmod +x test.sh    ./test.sh</code></li><li><code>/bin/sh test.sh</code> 这种方式运行的脚本，不需要在第一行指定解释器</li></ol><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ol><li><p>定义变量<br>定义变量时，变量名不加美元符号（$），变量名和等号之间不能有空格，显式赋值 <code>your_name=&quot;hello&quot;</code><br>还可以用语句给变量赋值: “for file  in <code>ls /etc</code>“</p></li><li><p>使用变量<br>使用一个定义过的变量，只要在变量名前面加美元符号即可<br><code>echo $your_name</code> <code>echo $&#123;your_name&#125;</code><br><strong>建议加上花括号，方便识别边界</strong></p></li><li><p>重定义变量<br>已定义的变量，可以被重新定义</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">your_name=&quot;hello&quot;<br>echo $your_name<br><br>your_name=&quot;alibaba&quot;<br>echo $your_name<br></code></pre></td></tr></table></figure></li><li><p>只读变量<br>使用<code>readonly</code> 命令可将变量设置为只读</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>myUrl=&quot;http://www.google.com&quot;<br>readonly myUrl<br>myUrl=&quot;http://www.runoob.com&quot;<br></code></pre></td></tr></table></figure><p> 该文件执行会报错</p></li><li><p>删除变量<br>使用 <code>unset</code> 命令可以删除变量<code>unset variable_name</code></p></li></ol><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ol><li>单行注释<br>以<code>#</code>开头的行就是注释，会被解释器忽略。</li><li>多行注释<br><code>:&lt;&lt;EOF 注释内容... 注释内容... 注释内容... EOF</code><br>EOF也可以用其他符号 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">:&lt;&lt;&#x27; 注释内容... 注释内容... 注释内容... &#x27;<br><br>:&lt;&lt;!<br>注释内容...<br>注释内容...<br>注释内容...<br>!<br></code></pre></td></tr></table></figure></li></ol><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串可以用单引号，也可以用双引号，也可以不用引号。<br>推荐使用双引号字符串</p><ol><li>单引号 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">str=&#x27;this is a string&#x27;<br></code></pre></td></tr></table></figure><strong>限制：</strong><br> 单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的<br> 单引号字串中不能出现单引号（对单引号使用转义符后也不行）</li><li>双引号 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">your_name=&#x27;hello&#x27;<br>str=&quot;Hello, I know your are \&quot;$your_name\&quot;! \n&quot;<br></code></pre></td></tr></table></figure> 双引号里可以有变量<br> 双引号里可以出现转义字符</li></ol><h4 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h4><ol><li>拼接字符串，直接”$变量” <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">your_name=&quot;hello&quot;<br>greeting=&quot;hello, &quot;$your_name&quot; !&quot;<br>greeting_1=&quot;hello, $&#123;your_name&#125; !&quot;<br><br>echo $greeting $greeting_1<br></code></pre></td></tr></table></figure></li><li>获取字符串长度： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">string=&quot;abcd&quot;<br>echo $&#123;#string&#125; <br></code></pre></td></tr></table></figure></li><li>提取子字符串<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">string=&quot;alibaba is a great company&quot;<br>echo $&#123;string:1:4&#125;<br></code></pre></td></tr></table></figure></li><li>查找子字符串<br>查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">string=&quot;run over is a great site&quot;<br>echo `expr index &quot;$string&quot; io`<br></code></pre></td></tr></table></figure></li></ol><h4 id="Shell传递参数"><a href="#Shell传递参数" class="headerlink" title="Shell传递参数"></a>Shell传递参数</h4><p>脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推…… $0 为执行的文件名<br>    <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">author:菜鸟教程</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">url:www.runoob.com</span><br><br>echo &quot;Shell 传递参数实例！&quot;;<br>echo &quot;执行的文件名：$0&quot;;<br>echo &quot;第一个参数为：$1&quot;;<br>echo &quot;第二个参数为：$2&quot;;<br>echo &quot;第三个参数为：$3&quot;;<br></code></pre></td></tr></table></figure><br>    <code>./test.sh 1 2 3</code><br>除此之外还有一些特殊字符用于处理参数：</p><ol><li>$# 传递到脚本的参数个数</li><li>$? 显示最后命令的退出状态，0表示没有错误</li></ol><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ol><li>数组定义<br>在 Shell 中，用括号来表示数组，元素用空格分割开。<br><code>数组名=(值1 值2 值3 值4)</code><br>还可以单独定义数组的各个分量 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">array_name[0]=value0<br>array_name[1]=value1<br>array_name[n]=valuen<br></code></pre></td></tr></table></figure></li><li>读取数组<br>读取数组元素值 <code>$&#123;数组名[下标]&#125;</code><br>使用@符号可以获取数组中的所有元素 <code>echo $&#123;array_name[@]&#125;</code></li><li>获取数组的长度 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">取得数组元素的个数</span><br>length=$&#123;#array_name[@]&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者</span><br>length=$&#123;#array_name[*]&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取得数组单个元素的长度</span><br>length=$&#123;#array_name[n]&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</p><p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。例如：两个数相加(注意使用的是反引号 &#96; 而不是单引号 ‘)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">val=`expr 2 + 2`<br>echo &quot;两数之和为 : $val&quot;<br></code></pre></td></tr></table></figure><p>注意事项：<br>    1. 表达式和运算符之间要有空格<br>    2. 完整的表达式要被&#96;包含</p><h4 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h4><p>Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</p><pre><code class="hljs"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">num1=100<br>num2=100<br>if test $[num1] -eq $[num2]<br>then echo &#x27;两个数相等！&#x27;<br>else echo &#x27;两个数不相等！&#x27;<br>fi<br></code></pre></td></tr></table></figure></code></pre><p>代码中的[] 执行基本的算数运算</p><h4 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/06/17/gitignore/"/>
    <url>/2024/06/17/gitignore/</url>
    
    <content type="html"><![CDATA[<h3 id="gitignore-文件"><a href="#gitignore-文件" class="headerlink" title="gitignore 文件"></a>gitignore 文件</h3><p>目的：由于Rust编译后会有一大堆文件，但我不希望都上传到远程库中。这时候就可以使用.gitignore来忽略一些不需要提交的文件</p><ul><li>空行或是以#开头的行即注释行将被忽略。</li><li>可以在前面添加正斜杠&#x2F;来避免递归,下面的例子中可以很明白的看出来与下一条的区别。</li><li>可以在后面添加正斜杠&#x2F;来忽略文件夹，例如build&#x2F;即忽略build文件夹。</li><li>可以使用!来否定忽略，即比如在前面用了*.apk，然后使用!a.apk，则这个a.apk不会被忽略。</li><li><em>用来匹配零个或多个字符，如</em>.[oa]忽略所有以”.o”或”.a”结尾，*<del>忽略所有以</del>结尾的文件（这种文件通常被许多编辑器标记为临时文件）；[]用来匹配括号内的任一字符，如[abc]，也可以在括号内加连接符，如[0-9]匹配0至9的数；?用来匹配单个字符。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/06/17/git%20usage/"/>
    <url>/2024/06/17/git%20usage/</url>
    
    <content type="html"><![CDATA[<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>目的是只需要提交部分改动</p><ol><li>git add          : 将要提交的部分代码提交到暂存区</li><li>git stash -u -k  : 保存未提交的修改</li><li>git status       : 查看状态</li><li>git commit -m “” : 提交暂存区的文件</li><li>git pull         : 拉取代码进行合并</li><li>git push         : 推送到远端仓库</li><li>git stash pop    : 恢复第2步保存到未提交的修改</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>super-resolution</title>
    <link href="/2024/06/17/super-resolution/"/>
    <url>/2024/06/17/super-resolution/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
